import re

class Interpreter:
    def __init__(self, expression):
        self.tokens = re.findall(r'\d+\.\d+|\d+|[()+\-*/^]', expression.replace(' ', ''))
        self.pos = 0

    def peek(self):
        return self.tokens[self.pos] if self.pos < len(self.tokens) else None

    def consume(self):
        token = self.peek()
        self.pos += 1
        return token

    def parse(self):
        return self.parse_expression()

    # expression := term ((+|-) term)*
    def parse_expression(self):
        value = self.parse_term()
        while self.peek() in ('+', '-'):
            op = self.consume()
            if op == '+':
                value += self.parse_term()
            elif op == '-':
                value -= self.parse_term()
        return value

    # term := factor ((*|/) factor)*
    def parse_term(self):
        value = self.parse_factor()
        while self.peek() in ('*', '/'):
            op = self.consume()
            if op == '*':
                value *= self.parse_factor()
            elif op == '/':
                value /= self.parse_factor()
        return value

    # factor := base (^ factor)?
    def parse_factor(self):
        base = self.parse_unary()
        if self.peek() == '^':
            self.consume()
            exponent = self.parse_factor()
            base **= exponent
        return base

    # unary := (+|-) unary | number | (expression)
    def parse_unary(self):
        if self.peek() == '+':
            self.consume()
            return self.parse_unary()
        elif self.peek() == '-':
            self.consume()
            return -self.parse_unary()
        elif self.peek() == '(':
            self.consume()
            value = self.parse_expression()
            assert self.consume() == ')'
            return value
        else:
            return float(self.consume())

def evaluate(expression):
    return Interpreter(expression).parse()
