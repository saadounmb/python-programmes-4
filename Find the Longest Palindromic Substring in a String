def longest_palindrome(s: str) -> str:
    if not s:
        return ""
    
    start, end = 0, 0  # Track the start and end of the longest palindrome found
    
    def expand_around_center(left: int, right: int) -> int:
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        # After expanding, right - left - 1 is the length of the palindrome
        return right - left - 1
    
    for i in range(len(s)):
        len1 = expand_around_center(i, i)      # Odd length palindrome (single center)
        len2 = expand_around_center(i, i + 1)  # Even length palindrome (two centers)
        max_len = max(len1, len2)
        
        if max_len > end - start:
            # Update start and end indices of the longest palindrome
            start = i - (max_len - 1) // 2
            end = i + max_len // 2
    
    return s[start:end + 1]

# Example usage:
print(longest_palindrome("babad"))  # Outputs: "bab" or "aba"
print(longest_palindrome("cbbd"))   # Outputs: "bb"
