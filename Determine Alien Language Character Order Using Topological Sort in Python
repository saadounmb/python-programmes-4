from collections import defaultdict, deque

def alien_order(words):
    # Step 1: Create data structures
    graph = defaultdict(set)
    indegree = defaultdict(int)
    all_chars = set(''.join(words))
    
    # Step 2: Build the graph
    for i in range(len(words) - 1):
        w1, w2 = words[i], words[i+1]
        min_len = min(len(w1), len(w2))
        found_diff = False
        for j in range(min_len):
            if w1[j] != w2[j]:
                if w2[j] not in graph[w1[j]]:
                    graph[w1[j]].add(w2[j])
                    indegree[w2[j]] += 1
                found_diff = True
                break
        # Edge case: ["abc", "ab"] is invalid
        if not found_diff and len(w1) > len(w2):
            return "Invalid order"
    
    # Initialize indegree of all characters to 0
    for char in all_chars:
        indegree.setdefault(char, 0)
    
    # Step 3: Topological Sort (Kahn's Algorithm)
    queue = deque([char for char in all_chars if indegree[char] == 0])
    result = []
    
    while queue:
        current = queue.popleft()
        result.append(current)
        for neighbor in graph[current]:
            indegree[neighbor] -= 1
            if indegree[neighbor] == 0:
                queue.append(neighbor)
    
    # Check for cycles
    if len(result) != len(all_chars):
        return "Invalid order"
    
    return ''.join(result)
